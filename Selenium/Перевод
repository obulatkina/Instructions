Селениум вебДрайвер
======================

Представление вебДрайвер:
----------------------------

Первичной новой функцией Selenium 2.0 является интеграция API WebDriver. WebDriver предназначен для обеспечения более простого
и более сжатого интерфейса программирования в дополнение к устранению некоторых ограничений в Selenium-RC API. 
Selenium-WebDriver был разработан для лучшей поддержки динамических веб-страниц, где элементы страницы могут 
меняться без перезагрузки самой страницы. Целью WebDriver является предоставление хорошо продуманного объектно-ориентированного
API, который обеспечивает улучшенную поддержку современных проблем тестирования веб-приложений.

Настройка проекта 
Если вы используете Python для автоматизации тестирования, вы, вероятно, уже знакомы с разработкой в ​​Python. 
Чтобы добавить Selenium в среду Python, выполните следующую команду из командной строки.

`pip install selenium`

Знакомство с API Selenium-WebDriver на примере
----------------------------------------------

WebDriver - это инструмент для автоматизации тестирования веб-приложений и, в частности, для проверки того, что они работают 
должным образом. Он предназначен для предоставления дружественного API, который легко исследовать и понимать, проще в 
использовании, чем API Selenium-RC (1.0), который поможет сделать ваши тесты более легкими для чтения и поддержки. 
Он не привязан к какой-либо конкретной тестовой платформе, поэтому его можно использовать одинаково хорошо в проекте 
модульного тестирования или в обычном старом «основном» методе. В этом разделе представлен API-интерфейс WebDriver, который 
поможет вам начать знакомство с ним. Начните с создания проекта WebDriver, если вы еще этого не сделали. Это было описано в 
предыдущем разделе «Настройка проекта Selenium-WebDriver».

Как только ваш проект настроен, вы можете увидеть, что WebDriver действует так же, как и любая обычная библиотека: он 
полностью автономный, и вам обычно не нужно запускать какие-либо дополнительные процессы или запускать какие-либо 
инсталляторы перед его использованием, так как на прокси-сервер с Selenium-RC.

`Примечание. Для использования ChromeDriver, драйвера Opera, драйвера Android и драйвера iOS требуются дополнительные шаги.`

Теперь вы готовы написать код. Легкий способ начать работу - это пример, который ищет термин «Сыр» в Google, а затем выводит
заголовок страницы результатов на консоль.

from selenium import webdriver
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait # available since 2.4.0
from selenium.webdriver.support import expected_conditions as EC # available since 2.26.0

`# Создадим новый экземпляр драйвера для файерфокс
driver = webdriver.Firefox()

# Перейдем на домашнюю страницу гугл
driver.get("http://www.google.com")

# Так как страница изначально ajax, то изначальный тайтл таков:
print driver.title

# Поиск элемента по аттрибуту name, равному q (поле поиска гугл)
inputElement = driver.find_element_by_name("q")

# Тип поиска
inputElement.send_keys("cheese!")

# Отправка формы (хотя Google автоматически выполняет поиск без отправки)
inputElement.submit()

try:
    # мы должны дождаться обновления страницы, последнее, что обновится - это заголовок
    WebDriverWait(driver, 10).until(EC.title_contains("cheese!"))

    # Вы должны увидеть «сыр! - Google Поиск»
    print driver.title

finally:
    driver.quit()`
    

Команды и операции API Selenium-WebDriver
-----------------------------------------

*Получение страницы*

Первое, что вы, вероятно, захотите сделать с помощью WebDriver, - это перейти на страницу. Обычный способ сделать это 
- вызвать «get»:

`driver.get("http://www.google.com")`

В зависимости от нескольких факторов, включая комбинацию OS / Browser, WebDriver может или не может дождаться загрузки
страницы. В некоторых случаях WebDriver может вернуть управление до того, как страница загрузится или даже начнется загрузка.
Чтобы обеспечить надежность, вам нужно дождаться отображения элементов на странице с помощью Явного и Неявного ожиданий.

Поиск элементов пользовательского интерфейса (WebElements)
----------------------------------------------------------

Локальные элементы в WebDriver можно выполнить в самом экземпляре WebDriver или в WebElement. Каждая из языковых привязок
предоставляет метод «Найти элемент» и «Найти элементы». Первый возвращает объект WebElement, соответствующий запросу, и 
генерирует исключение, если такой элемент не может быть найден. Последний возвращает список WebElements, возможно пустой, если 
никакие элементы DOM не соответствуют запросу.

Методы «Найти» принимают объект локатора или запроса, называемый «By». Стратегии «By» перечислены ниже.


*By ID*
Это наиболее эффективный и предпочтительный способ поиска элемента. Общими ошибками, которые делают разработчики 
пользовательского интерфейса, является наличие неуникального идентификатора на странице или автоматическое генерирование 
идентификатора, и этого следует избегать. Класс в элементе html более подходит, чем автогенерированный идентификатор.

Пример того, как найти элемент, который выглядит так:

`<div id="coolestWidgetEvah">...</div>`

`element = driver.find_element_by_id("coolestWidgetEvah")`

или

`from selenium.webdriver.common.by import By
element = driver.find_element(by=By.ID, value="coolestWidgetEvah")`

*By Class name*
«Класс» в этом случае относится к атрибуту элемента DOM. Часто в практическом использовании существует много элементов DOM
с одним и тем же именем класса, поэтому поиск нескольких элементов становится более практичным вариантом для поиска первого
элемента.

Пример того, как найти элемент, который выглядит так:

`<div class="cheese"><span>Cheddar</span></div><div class="cheese"><span>Gouda</span></div>`

`cheeses = driver.find_elements_by_class_name("cheese")`

или

`from selenium.webdriver.common.by import By
cheeses = driver.find_elements(By.CLASS_NAME, "cheese")`

*By Tag name*

По названию тега
Имя тега DOM элемента.

Пример того, как найти элемент, который выглядит так:

`<iframe src="..."></iframe>`


`frame = driver.find_element_by_tag_name("iframe")`

или

`from selenium.webdriver.common.by import By
frame = driver.find_element(By.TAG_NAME, "iframe")`

*By name*
Найдите элемент ввода с соответствующим атрибутом имени.

Пример того, как найти элемент, который выглядит так:

`<input name="cheese" type="text"/>`

`cheese = driver.find_element_by_name("cheese")`

или

`from selenium.webdriver.common.by import By
cheese = driver.find_element(By.NAME, "cheese")`

*By Link text*
Найдите элемент ссылки с соответствующим видимым текстом.

Пример того, как найти элемент, который выглядит так:

`<a href="http://www.google.com/search?q=cheese">cheese</a>>`

`cheese = driver.find_element_by_link_text("cheese")`

или

`from selenium.webdriver.common.by import By
cheese = driver.find_element(By.LINK_TEXT, "cheese")`
